{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","this","Component","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","htmlFor","type","id","onChange","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"0PAGMA,EAAc,WAClB,OACE,+BACQ,4BACE,oCACA,mCACA,yCAMRC,EAAY,SAAAC,GAChB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACA,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACA,4BAAQC,QAAS,kBACnBT,EAAMU,gBAAgBL,KADpB,eAON,OAAO,+BAAQJ,IAcAU,E,iLAXD,IAAD,EACoCC,KAAKZ,MAAxCE,EADD,EACCA,cAAeQ,EADhB,EACgBA,gBACvB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYR,cAAeA,EAAgBQ,gBAAiBA,S,GANlDG,a,OCcLC,E,2MA1CbC,aAAe,CACbR,KAAM,GACNC,IAAK,I,EAEPQ,MAAQ,EAAKD,a,EAEbE,aAAe,SAAAC,GAAU,IAAD,EACCA,EAAMC,OAAtBZ,EADe,EACfA,KAAMa,EADS,EACTA,MAEb,EAAKC,SAAL,eACGd,EAAOa,K,EAGZE,WAAa,WACX,EAAKtB,MAAMuB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,wEAEZ,IAAD,EACeH,KAAKI,MAAnBT,EADD,EACCA,KAAMC,EADP,EACOA,IAEb,OACE,8BACE,2BAAOgB,QAAQ,QAAf,QACA,2BACAC,KAAK,OACLlB,KAAK,OACLmB,GAAG,OACHN,MAAOb,EACPoB,SAAUf,KAAKK,eACf,2BAAOO,QAAQ,OAAf,OACA,2BACAC,KAAK,OACLlB,KAAK,MACLmB,GAAG,MACHN,MAAOZ,EACPmB,SAAUf,KAAKK,eACf,2BAAOQ,KAAK,SAASL,MAAM,SAASX,QAASG,KAAKU,kB,GArCvCT,aCwCJe,G,gNA9BbZ,MAAQ,CACLa,WAAa,I,EAEdnB,gBAAkB,SAAAL,GAAU,IAClBwB,EAAe,EAAKb,MAApBa,WAER,EAAKR,SAAS,CACZQ,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM3B,Q,EAKnBkB,aAAe,SAAAQ,GACb,EAAKV,SAAS,CAAEQ,WAAW,GAAD,mBAAM,EAAKb,MAAMa,YAAjB,CAA6BE,O,wEAG/C,IACAF,EAAejB,KAAKI,MAApBa,WAER,OACE,yBAAKI,UAAY,aACf,kBAAC,EAAD,CAAQ/B,cAAe2B,EAAanB,gBAAiBE,KAAKF,kBAC1D,kBAAC,EAAD,CAAOa,aAAcX,KAAKW,oB,GA1BlBV,c,MCSlBqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.66c6c769.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Job</th>\r\n              <th>Remove</th>\r\n            </tr>\r\n          </thead>\r\n  )\r\n}\r\n\r\nconst TableBody = props => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n    <tr key={index}>\r\n      <td>{row.name}</td>\r\n      <td>{row.job}</td>\r\n      <td>\r\n      <button onClick={() =>\r\n    props.removeCharacter(index)\r\n      }>Delete</button>\r\n      </td>\r\n    </tr>\r\n    )\r\n  })\r\nreturn <tbody>{rows}</tbody>\r\n}\r\nclass Table extends Component {\r\n    render() {\r\n      const { characterData, removeCharacter } = this.props\r\n      return (\r\n        <table>\r\n          <TableHeader />\r\n          <TableBody  characterData={characterData}  removeCharacter={removeCharacter}/>\r\n        </table>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n  initialState = {\r\n    name: '',\r\n    job: '',\r\n  }\r\n  state = this.initialState\r\n\r\n  handleChange = event => {\r\n    const {name, value } = event.target\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n  submitForm = () => {\r\n    this.props.handleSubmit(this.state)\r\n    this.setState(this.initialState)\r\n  }\r\n  render(){\r\n    const {name, job } = this.state;\r\n\r\n    return (\r\n      <form>\r\n        <label htmlFor='name'>Name</label>\r\n        <input\r\n        type='text'\r\n        name='name'\r\n        id='name'\r\n        value={name}\r\n        onChange={this.handleChange}/>\r\n        <label htmlFor='job'>Job</label>\r\n        <input\r\n        type='text'\r\n        name='job'\r\n        id='job'\r\n        value={job}\r\n        onChange={this.handleChange}/>\r\n        <input type='button' value='Submit' onClick={this.submitForm}/>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component} from 'react';\n//import logo from './logo.svg';\nimport Table from './Table';\nimport Form from './Form';\nimport './App.css';\n\n\n\n\nclass App extends Component{\n  \n  \n  state = {\n     characters : [],\n  }\n    removeCharacter = index => {\n      const { characters } = this.state\n    \n      this.setState({\n        characters: characters.filter((character, i) => {\n          return i !== index\n        }),\n      })\n    }\n\n    handleSubmit = character => {\n      this.setState({ characters: [...this.state.characters, character] })\n    }\n\n    render() {\n      const { characters } = this.state\n\n      return (\n        <div className = 'container'>\n          <Table  characterData={characters}  removeCharacter={this.removeCharacter} />\n          <Form  handleSubmit={this.handleSubmit} />\n        </div>\n      )\n    }\n    \n  \n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './App.css';\n //import App from './App';\n //import * as serviceWorker from './serviceWorker';\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}